; .EQU for keyboard
	.EQU KBD_CNTL, $000
	.EQU KBD_STAT, $000
	.EQU KBD_DATA, $001

	.EQU INTERRUPT_ENA, $80
; .EQU for Cursor + Display 
	.EQU CRT_XREG, $314
	.EQU CRT_YREG, $315
	.EQU CRT_CNTL, $316
	.EQU CRT_DATA, $317
	.EQU CRT_ROWS, $0E ; total number of rows in display = 14
	.EQU CRT_COLS, $26 ; total number of columns in display = 38
	.EQU TOP, 0
	.EQU BOTTOM, 13
	.EQU LEFT, 0
	.EQU RIGHT, 37


; Main
	; StartOfGame - Initialization of lives to 5, levels from 0, score from 0
	; print score in top row

; Start
	; Initialize player position and cars' positions

; Play
	; Start timer, set keyboard interrupt, loop cars to keep them moving



; End
	; If timer reaches 0 or collision occurred, call subtract life

; Procedure keyboardISR
keyboardISR:	PSHA
	LDA# 0
	OUTB KBD_CNTL
	INB KBD_DATA
	CMA# 'd' ; just used d for now as a way to halt the game  NEED TO CHANGE LATER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
	JNE rightk
	HLT
rightk:	CMA# 'k'
	JNE leftj
	lda#	1	; set to RIGHT_UP
	jmp	MoveRight
	; move cursor right
leftj:	CMA# 'k'
	JNE upi
	; move cursor left
upi:	CMA# 'k'
	JNE downm
	; move cursor up
downm:	CMA# 'k'
	JNE None
	; move cursor down
None:	LDA# Interrupt_Enabled
	OUTB KBD_CNTL
	POPA
	IRTN
MoveRight:



; moveCursorCharacter (used whenever there is a keyboard interrupt)
	.EQU moveKey, 4
	.EQU moveY, 3
	.EQU moveX, 2
moveCursor:	BGN# 0
	


; Procedure LevelComplete





; Procedure SubtractLife



; Procedure PrintGameOver






; Procedure RandomFunction



















; Variables
Score: .WORD 0
Lives: .WORD 5
Level: .WORD 0 
CarsVelocity: .BLKW 9, 0
CarsRowPosition: .BLKW 9, 0
CarsColumnPosition: .BLKW 9, 0
